void setup()
{
  size(200,200);
  Serenity engine = new Serenity();
  engine.Start();
  engine.Log(1, "Bruh");
}

void draw()
{

}

class Serenity
{
  
  private ArrayList<Serenity.Object> Objects;
  private ArrayList<String> Logs;
  private Logger CoreLogger;
  private boolean Running;
  
  public Serenity()
  {
    Objects = new ArrayList<Serenity.Object>();
    Logs = new ArrayList<String>();
    CoreLogger = new Logger();
    Running = false;
  }
  
  public void Start()
  {
    Running = true;
    inert();
  }
  
  public void Stop()
  {
    Running = false;
  }
  
  private void inert()
  {
    //CoreLogger.Log(1, "GELP");
    while (Running) 
    {  
      
    }
    
  }
  
  public Serenity.Object obj(float x, float y)
  {
    return new Object(x, y);
  }
  
  public Serenity.Rect rectangle(float x, float y, float w, float h)
  {
    return new Rect(x, y, w, h);
  }
    
  public void Log(int lvl, String msg) 
  {
     CoreLogger.Log(lvl, msg);
  }
    
  public class Object
  {
    
    protected float x, y, w, h, r;
    
    public Object(float x, float y)
    {
      this.x = x; this.y = y;
      Objects.add(this);
    }
    
    public Object(float x, float y, float r)
    {
      this.x = x; this.y = y; this.r = r;
      Objects.add(this);
    }
    
    public Object(float x, float y, float w, float h)
    {
      this.x = x; this.y = y; this.w = w; this.h = h;
      Objects.add(this);
    }
    
    public float getX() { return this.x; }    
    public float getY() { return this.y; }
    public float getWidth() { return this.w != 0.0f ? this.w : 0.0f; }
    public float getHeight() { return this.h != 0.0f ? this.h : 0.0f; }
    public float getRadius() { return this.r != 0.0f ? this.r : 0.0f; }
    
  }
  
  public class Rect extends Serenity.Object
  {
    
      public Rect(float x, float y, float w, float h)
      {
        super(x, y, w, h);
      }
    
  }
  
  public class Logger
  {
    
    private HashMap<Integer, String> ERRORS = new HashMap(); 
    
    public Logger()
    {
      putMap();
    }
    
    private void putMap()
    {
      ERRORS.put(1, "[LOG]: ");
      ERRORS.put(2, "[WARN]: ");
      ERRORS.put(3, "[FATAL]: ");
    }
    
    public void INFO()
    {
      println("KEY 1: [LOG]");
      println("KEY 2: [WARN]");
      println("KEY 2: [FATAL]");
    }
    
    public void ErrorLog(int level)
    {
      if ( level <= ERRORS.size() && level != 1 )
      {
        String log = ERRORS.get(level) + "'An Error Has Occured'";
        print(log);
        Logs.add(log);
      }
    }
    
    public void Log(int level, String msg)
    {
      if ( level <= ERRORS.size() )
      {
        String log = ERRORS.get(level) + "'" + msg + "'";
        print(log);
        Logs.add(log);
      }      
    }
    
  }
 
}
